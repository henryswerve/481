#exercise 0

def github() -> str:
    """
    comment
    """
    return "https://github.com/henryswerve/481.git"

#exercise 1

import numpy
import pandas
import scipy
import matplotlib
import seaborn

# print("hi")

# Please write a function called evens_and_odds that takes as argument a natural number n and returns a dictionary with two keys, 
# “evens” and “odds”. “evens” should be the sum of all the even natural numbers less than n, and “odds” the sum of all natural numbers less than n.

# For example, evens_and_odds(4) should return

# {'evens': 2, 'odds': 4}
#exercise 2


def evens_and_odds(n: int) -> dict:
    """
    Some docstrings.
    """


    return evens_and_odds

#exercise 3

# Please write a function called time_diff that takes as arguments two strings in the format ‘YYYY-MM-DD’ 
# and a keyword out dictating the output. If the keyword is “float”, return the time between the two dates (in absolute value) in days. 
# If the keyword is “string”, return “There are XX days between the two dates”. If not specified, the out keyword should be assumed to be “float”. 
# You should use the datetime package, and no others.

# For example, time_diff('2020-01-01', '2020-01-02', 'float') should return

# 1

# For example, time_diff('2020-01-03', '2020-01-01', 'string') should return

# "There are 2 days between the two dates"

from typing import Union

def time_diff(date_1: str, date_2: str, out: str) -> Union[str,float]:
    """
    Some docstrings.
    """

    return None

#exercise 4

# Please write a function called reverse that takes as its argument a list and returns a 
# list of the arguments in reverse order (do not use any built-in sorting methods).

# For example, reverse(['a', 'b', 'c']) should return

# ['c', 'b', 'a']

def reverse(in_list: list) -> list:
    """
    Some docstrings.
    """
    
    return None

#exercise 5

# Write a function called prob_k_heads that takes as its arguments natural numbers n 
# and k with n>k and returns the probability of getting k heads from n flips 3.
#this is a binomial distribution

# For example, prob_k_heads(1,1) should return

# .5

def prob_k_heads(n: int, k: int) -> float:
    """
    Some docstrings.
    """

    return None