#exercise 0

def github() -> str:
    """
    comment
    """
    return "https://github.com/henryswerve/481.git"

#exercise 1

import numpy
import pandas
import scipy
import matplotlib
import seaborn

#exercise 2 DONE

def evens_and_odds(n: int) -> dict:
    """
    """
    evensum = 0
    oddsum = 0
    dict_1 = {
    'evens': [],
    'odds': [],
    }
    
    for i in range(n):
        if i % 2 == 0:
            evensum += i
        else:
            oddsum += i
    dict_1['evens'].append(evensum)
    dict_1['odds'].append(oddsum)
    return dict_1

print(evens_and_odds(4))

#exercise 3 done

from typing import Union
import datetime


def time_diff(date_1: str, date_2: str, out: str) -> Union[str,float]:
    """
    Some docstrings.
    """

    date_1 = datetime.datetime.strptime(date_1, '%Y-%m-%d')
    date_2 = datetime.datetime.strptime(date_2, '%Y-%m-%d')
    
    delta = abs(date_2 - date_1)
        
    if out == "string":
        return f"There are {str(delta.days)} days between the two dates"
    elif out == "float":
        delta_1 = abs(date_2 - date_1)
        return delta_1.days

print(time_diff('2020-01-03', '2020-01-01', 'string'))
print(time_diff('2020-01-02', '2020-01-01', 'float'))


#exercise 4 DONE

in_list = ['a', 'b', 'c']

def reverse(in_list: list) -> list:
    """
    want to reverse order of list.
    """
    newlist = []
    newlist = list(reversed(in_list))
    
    return newlist

results_4 = reverse(in_list)

print(results_4)

#exercise 5 done

n = 0
k = 0

def prob_k_heads(n: int, k: int) -> float:
    """
    """
    # binom coef (n choose k part is done, 
    # n_minus_k_fac is the value returned)
    n_minus_k_fac = 1
    for i in range(1, n-k+1):
        n_minus_k_fac *= i
    n_choose_k = 1
    for i in range(k+1, n+1):
        n_choose_k *= i
    n_choose_k /= n_minus_k_fac

    # p^x * q^n-x
    p_val = 0
    q_val = 0
    
    # we know the prob for success/failure is 0.5 for flipping coins
    for i in range(n):
        p_val = 0.5**i
        q_val = 0.5**(n - i)

    binom_prob = n_choose_k * p_val * q_val

    return binom_prob

print(prob_k_heads(1, 1))