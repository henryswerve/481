#exercise 0

def github() -> str:
    """
    comment
    """
    return "https://github.com/henryswerve/481.git"

#exercise 1

import numpy
import pandas
import scipy
import matplotlib
import seaborn

# Please write a function called evens_and_odds that takes as argument 
# a natural number n and returns a dictionary with two keys, 
# “evens” and “odds”. “evens” should be the sum of all the even 
# natural numbers less than n, and “odds” the sum of all natural numbers less than n.

# For example, evens_and_odds(4) should return
# {'evens': 2, 'odds': 4}

#exercise 2


dict_1 = {
    'evens': [],
    'odds': [],
}

n = 4

def evens_and_odds(n: int) -> dict:
    """
    takes in natural number n and adds to either 'evens' or 
    'odds' in dict_1 depending on divisibility
    """

    for i in range(n):
        #want something where if i divide by 2, i get a full number
        #if the number is whole, it will be an int not a float, and will be added to odds
        if i % 2 == 0:
            dict_1['evens'].append(i)

        #else, it is odd and we add to odd from dict_1
        else:
            dict_1['odds'].append(i)
    return dict_1

results = evens_and_odds(n)
print(results)

#exercise 3

# Please write a function called time_diff that takes as arguments two strings in the format ‘YYYY-MM-DD’ 
# and a keyword out dictating the output. If the keyword is “float”, 
# return the time between the two dates (in absolute value) in days. 
# If the keyword is “string”, return “There are XX days between the two dates”. 
# If not specified, the out keyword should be assumed to be “float”. 
# You should use the datetime package, and no others.

# For example, time_diff('2020-01-01', '2020-01-02', 'float') should return

# 1

# For example, time_diff('2020-01-03', '2020-01-01', 'string') should return

# "There are 2 days between the two dates"

from typing import Union

import datetime

#yr month day

date_1 = datetime.date(2024, 3, 31)

date_2 = datetime.date(2024, 4, 1)

#formats both a string
date_1.strftime("%Y-%m-%d")

date_2.strftime("%Y-%m-%d")

delta = date_2 - date_1

print(delta)
# print(dt2)

def time_diff(date_1: str, date_2: str, out: str) -> Union[str,float]:
    """
    Some docstrings.
    """
    # if keyword is string, return there are XX days between the two dates.

    # if 

    # else 
    return None

#exercise 4

# Please write a function called reverse that takes as its argument a list and returns a 
# list of the arguments in reverse order (do not use any built-in sorting methods).

# For example, reverse(['a', 'b', 'c']) should return

# ['c', 'b', 'a']

in_list = ['a', 'b', 'c']
#  0, 1, 2
# n, n + 1, n + 2

new_list = []

# we want to reverse, so we can 
def reverse(in_list: list) -> list:
    """
    want to reverse order of list.
    """
    new_list = in_list[::-1]
    
    return new_list

results_4 = new_list

print(results_4)

#exercise 5

# Write a function called prob_k_heads that takes as its arguments natural numbers n 
# and k with n>k and returns the probability of getting k heads from n flips 3.
#this is a binomial distribution

# For example, prob_k_heads(1,1) should return

# .5

def prob_k_heads(n: int, k: int) -> float:
    """
    Some docstrings.
    """

    return None